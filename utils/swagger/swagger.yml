openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API for user registration, login, and listing

paths:
  /api/users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        201:
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        400:
          description: Bad request – validation error

  /api/users/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        401:
          description: Unauthorized – invalid credentials

  /api/users:
    get:
      summary: Get all users (protected route)
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        401:
          description: Unauthorized – missing or invalid token

  /api/courses:
    get:
      summary: Get all courses
      tags:
        - Courses
      responses:
        200:
          description: A list of all courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoursesResponse'
        500:
          description: Server error
    post:
      summary: Create a new course
      tags:
        - Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        200:
          description: Successfully created the course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCourseResponse'
        400:
          description: Bad request – validation error

  /api/courses/{id}:
    get:
      summary: Get a course by ID
      tags:
        - Courses
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the course to retrieve
      responses:
        200:
          description: Successfully retrieved course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseByIdResponse'
        404:
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update a course by ID
      tags:
        - Courses
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the course to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseRequest'
      responses:
        200:
          description: Successfully updated the course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseUpdateResponse'
        404:
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a course by ID
      tags:
        - Courses
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the course to delete
      responses:
        200:
          description: Successfully deleted the course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCourseResponse'
        403:
          description: Unauthorized user – only admins or managers can delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        404:
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterInput:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
      properties:
        firstname:
          type: string
          example: Roaa
        lastname:
          type: string
          example: Fouda
        email:
          type: string
          example: roaa.fouda2@gmail.com
        password:
          type: string
          example: 12345
        role:
          type: string
          enum: [user, admin, manager]
          example: user
        avatar:
          type: string
          nullable: true
          example: user-1745079745702.png

    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: roaa.fouda2@gmail.com
        password:
          type: string
          example: 12345

    AuthSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    UsersResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        _id:
          type: string
          example: "6802dc7672bbc41b0a28dcea"
        firstname:
          type: string
          example: Roaa
        lastname:
          type: string
          example: Fouda
        email:
          type: string
          example: roaa.fouda2@gmail.com
        role:
          type: string
          enum: [user, admin, manager]
          example: user
        avatar:
          type: string
          nullable: true
          example: user-1745079745702.png
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    Course:
      type: object
      properties:
        _id:
          type: string
          example: "68026673f3fdee838dd1cfa8"
        title:
          type: string
          example: MongoDB for Beginners
        price:
          type: number
          format: float
          example: 39.99

    CoursesResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: array
          items:
            $ref: '#/components/schemas/Course'

    CourseByIdResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          $ref: '#/components/schemas/Course'

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Course not found
        code:
          type: integer
          example: 404
        data:
          type: object
          nullable: true

    UnauthorizedResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: Unauthorized user
        code:
          type: integer
          example: 403
        data:
          type: object
          nullable: true

    UpdateCourseRequest:
      type: object
      properties:
        title:
          type: string
          example: new Title
        price:
          type: number
          example: 22
      required:
        - title
        - price

    CourseUpdateResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          $ref: '#/components/schemas/Course'

    CreateCourseRequest:
      type: object
      properties:
        title:
          type: string
          example: new course
        price:
          type: number
          example: 33
      required:
        - title
        - price

    CreateCourseResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          $ref: '#/components/schemas/Course'

    DeleteCourseResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            _id:
              type: string
              example: "68026673f3fdee838dd1cfa8"
            title:
              type: string
              example: "MongoDB for Beginners"
            price:
              type: number
              format: float
              example: 39.99
